// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.21.12
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `hello.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:item.Shirt)
pub struct Shirt {
    // message fields
    // @@protoc_insertion_point(field:item.Shirt.color)
    pub color: ::std::string::String,
    // @@protoc_insertion_point(field:item.Shirt.size)
    pub size: ::protobuf::EnumOrUnknown<shirt::Size>,
    // special fields
    // @@protoc_insertion_point(special_field:item.Shirt.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Shirt {
    fn default() -> &'a Shirt {
        <Shirt as ::protobuf::Message>::default_instance()
    }
}

impl Shirt {
    pub fn new() -> Shirt {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "color",
            |m: &Shirt| { &m.color },
            |m: &mut Shirt| { &mut m.color },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "size",
            |m: &Shirt| { &m.size },
            |m: &mut Shirt| { &mut m.size },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Shirt>(
            "Shirt",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Shirt {
    const NAME: &'static str = "Shirt";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.color = is.read_string()?;
                },
                16 => {
                    self.size = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.color.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.color);
        }
        if self.size != ::protobuf::EnumOrUnknown::new(shirt::Size::SMALL) {
            my_size += ::protobuf::rt::int32_size(2, self.size.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.color.is_empty() {
            os.write_string(1, &self.color)?;
        }
        if self.size != ::protobuf::EnumOrUnknown::new(shirt::Size::SMALL) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.size))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Shirt {
        Shirt::new()
    }

    fn clear(&mut self) {
        self.color.clear();
        self.size = ::protobuf::EnumOrUnknown::new(shirt::Size::SMALL);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Shirt {
        static instance: Shirt = Shirt {
            color: ::std::string::String::new(),
            size: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Shirt {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Shirt").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Shirt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Shirt {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Shirt`
pub mod shirt {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:item.Shirt.Size)
    pub enum Size {
        // @@protoc_insertion_point(enum_value:item.Shirt.Size.SMALL)
        SMALL = 0,
        // @@protoc_insertion_point(enum_value:item.Shirt.Size.MEDIUM)
        MEDIUM = 1,
        // @@protoc_insertion_point(enum_value:item.Shirt.Size.LARGE)
        LARGE = 2,
    }

    impl ::protobuf::Enum for Size {
        const NAME: &'static str = "Size";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Size> {
            match value {
                0 => ::std::option::Option::Some(Size::SMALL),
                1 => ::std::option::Option::Some(Size::MEDIUM),
                2 => ::std::option::Option::Some(Size::LARGE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Size] = &[
            Size::SMALL,
            Size::MEDIUM,
            Size::LARGE,
        ];
    }

    impl ::protobuf::EnumFull for Size {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("Shirt.Size").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Size {
        fn default() -> Self {
            Size::SMALL
        }
    }

    impl Size {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Size>("Shirt.Size")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bhello.proto\x12\x04item\"m\n\x05Shirt\x12\x14\n\x05color\x18\x01\
    \x20\x01(\tR\x05color\x12$\n\x04size\x18\x02\x20\x01(\x0e2\x10.item.Shir\
    t.SizeR\x04size\"(\n\x04Size\x12\t\n\x05SMALL\x10\0\x12\n\n\x06MEDIUM\
    \x10\x01\x12\t\n\x05LARGE\x10\x02b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Shirt::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(shirt::Size::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
