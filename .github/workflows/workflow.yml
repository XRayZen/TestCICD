name: CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  TF_VAR_environment: prod
  TG_VERSION: 0.45.16
  TG_WORK_DIR: ./terragrunt/envs
  AWS_Role_ARN: secrets.IAM_ROLE_ARN
  REPO_ECR_NAME: test-cicd-repo

jobs:
  lambda_ci_cd:
    # lambdaディレクトリに変更があった場合は実行
    # コミットメッセージにlambdaが含まれている場合は実行
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.modified, 'lambda/') || contains(github.event.head_commit.message, 'lambda') }}
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        function:
          - hello
          - world
          # 他のLambda関数名を追加

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # ディストレスコンテナを使うために必要
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Set up Docker BuildKit
      run: |
        echo '{"features":{"buildkit":true}}' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker

    # AWS OIDC認証
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    # Rustのテストは後で実装する
    # - name: Rust test
    #   working-directory: ./lambda/${{ matrix.function }}
    #   run: cargo test

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

      # 関数名のタグがあるイメージをECRから削除
    - name: Delete old docker image
      run: |
        aws ecr batch-delete-image \
          --repository-name ${{ env.REPO_ECR_NAME }} \
          --image-ids imageTag=${{ matrix.function }} || true

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.REPO_ECR_NAME }}
        IMAGE_TAG: ${{ matrix.function }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./lambda/${{ matrix.function }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
      # Lambda関数を更新
    - name: Update Lambda function
      run: |
        aws lambda update-function-code \
          --function-name ${{ matrix.function }} \
          --image-uri ${{ steps.login-ecr.outputs.registry }}/${{ env.REPO_ECR_NAME }}:${{ matrix.function }}

  deploy_infrastructure:
    # terragruntディレクトリの変更があった場合に実行
    if: ${{ contains(github.event.head_commit.modified, 'terragrunt/') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    # AWS OIDC認証
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.IAM_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        # Terragruntを使うからfalseにしておく必要がある
        terraform_wrapper: false

    - name: Setup Terragrunt
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v${TG_VERSION}/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt
        terragrunt --version

    - name: Terragrunt init
      working-directory: ${{ env.TG_WORK_DIR }}/${{ env.TF_VAR_environment }}
      run: terragrunt run-all init --terragrunt-non-interactive

    - name: Check terraform fmt
      working-directory: ${{ env.TG_WORK_DIR }}/${{ env.TF_VAR_environment }}
      run: terraform fmt -check -recursive -diff

    - name: Terragrunt validate
      working-directory: ${{ env.TG_WORK_DIR }}/${{ env.TF_VAR_environment }}
      run: terragrunt run-all validate --terragrunt-non-interactive

    - name: Terragrunt plan
      working-directory: ${{ env.TG_WORK_DIR }}/${{ env.TF_VAR_environment }}
      run: |
          terragrunt run-all plan

    - name: Terragrunt apply
      working-directory: ${{ env.TG_WORK_DIR }}/${{ env.TF_VAR_environment }}
      run: |
          terragrunt run-all apply --terragrunt-non-interactive -auto-approve
